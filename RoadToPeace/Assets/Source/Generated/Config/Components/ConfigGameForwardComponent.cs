//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity gameForwardEntity { get { return GetGroup(ConfigMatcher.GameForward).GetSingleEntity(); } }
    public GameForwardComponent gameForward { get { return gameForwardEntity.gameForward; } }
    public bool hasGameForward { get { return gameForwardEntity != null; } }

    public ConfigEntity SetGameForward(UnityEngine.Transform newPoint) {
        if (hasGameForward) {
            throw new Entitas.EntitasException("Could not set GameForward!\n" + this + " already has an entity with GameForwardComponent!",
                "You should check if the context already has a gameForwardEntity before setting it or use context.ReplaceGameForward().");
        }
        var entity = CreateEntity();
        entity.AddGameForward(newPoint);
        return entity;
    }

    public void ReplaceGameForward(UnityEngine.Transform newPoint) {
        var entity = gameForwardEntity;
        if (entity == null) {
            entity = SetGameForward(newPoint);
        } else {
            entity.ReplaceGameForward(newPoint);
        }
    }

    public void RemoveGameForward() {
        gameForwardEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public GameForwardComponent gameForward { get { return (GameForwardComponent)GetComponent(ConfigComponentsLookup.GameForward); } }
    public bool hasGameForward { get { return HasComponent(ConfigComponentsLookup.GameForward); } }

    public void AddGameForward(UnityEngine.Transform newPoint) {
        var index = ConfigComponentsLookup.GameForward;
        var component = (GameForwardComponent)CreateComponent(index, typeof(GameForwardComponent));
        component.point = newPoint;
        AddComponent(index, component);
    }

    public void ReplaceGameForward(UnityEngine.Transform newPoint) {
        var index = ConfigComponentsLookup.GameForward;
        var component = (GameForwardComponent)CreateComponent(index, typeof(GameForwardComponent));
        component.point = newPoint;
        ReplaceComponent(index, component);
    }

    public void RemoveGameForward() {
        RemoveComponent(ConfigComponentsLookup.GameForward);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherGameForward;

    public static Entitas.IMatcher<ConfigEntity> GameForward {
        get {
            if (_matcherGameForward == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.GameForward);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherGameForward = matcher;
            }

            return _matcherGameForward;
        }
    }
}
