//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity difficultLevelupEntity { get { return GetGroup(ConfigMatcher.DifficultLevelup).GetSingleEntity(); } }
    public DifficultLevelupComponent difficultLevelup { get { return difficultLevelupEntity.difficultLevelup; } }
    public bool hasDifficultLevelup { get { return difficultLevelupEntity != null; } }

    public ConfigEntity SetDifficultLevelup(float newLeveluptime) {
        if (hasDifficultLevelup) {
            throw new Entitas.EntitasException("Could not set DifficultLevelup!\n" + this + " already has an entity with DifficultLevelupComponent!",
                "You should check if the context already has a difficultLevelupEntity before setting it or use context.ReplaceDifficultLevelup().");
        }
        var entity = CreateEntity();
        entity.AddDifficultLevelup(newLeveluptime);
        return entity;
    }

    public void ReplaceDifficultLevelup(float newLeveluptime) {
        var entity = difficultLevelupEntity;
        if (entity == null) {
            entity = SetDifficultLevelup(newLeveluptime);
        } else {
            entity.ReplaceDifficultLevelup(newLeveluptime);
        }
    }

    public void RemoveDifficultLevelup() {
        difficultLevelupEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public DifficultLevelupComponent difficultLevelup { get { return (DifficultLevelupComponent)GetComponent(ConfigComponentsLookup.DifficultLevelup); } }
    public bool hasDifficultLevelup { get { return HasComponent(ConfigComponentsLookup.DifficultLevelup); } }

    public void AddDifficultLevelup(float newLeveluptime) {
        var index = ConfigComponentsLookup.DifficultLevelup;
        var component = (DifficultLevelupComponent)CreateComponent(index, typeof(DifficultLevelupComponent));
        component.leveluptime = newLeveluptime;
        AddComponent(index, component);
    }

    public void ReplaceDifficultLevelup(float newLeveluptime) {
        var index = ConfigComponentsLookup.DifficultLevelup;
        var component = (DifficultLevelupComponent)CreateComponent(index, typeof(DifficultLevelupComponent));
        component.leveluptime = newLeveluptime;
        ReplaceComponent(index, component);
    }

    public void RemoveDifficultLevelup() {
        RemoveComponent(ConfigComponentsLookup.DifficultLevelup);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherDifficultLevelup;

    public static Entitas.IMatcher<ConfigEntity> DifficultLevelup {
        get {
            if (_matcherDifficultLevelup == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.DifficultLevelup);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherDifficultLevelup = matcher;
            }

            return _matcherDifficultLevelup;
        }
    }
}
